Traceback (most recent call last):
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/julienprat/anaconda3/envs/book/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
@jitclass(planning_data)
class PlanningProblem():

    def __init__(self, Î³=2, Î²=0.95, Î´=0.02, Î±=0.33, A=1):

        self.Î³, self.Î² = Î³, Î²
        self.Î´, self.Î±, self.A = Î´, Î±, A

    def u(self, c):
        '''
        Utility function
        ASIDE: If you have a utility function that is hard to solve by hand
        you can use automatic or symbolic differentiation
        See https://github.com/HIPS/autograd
        '''
        Î³ = self.Î³

        return c ** (1 - Î³) / (1 - Î³) if Î³!= 1 else np.log(c)

    def u_prime(self, c):
        'Derivative of utility'
        Î³ = self.Î³

        return c ** (-Î³)

    def u_prime_inv(self, c):
        'Inverse of derivative of utility'
        Î³ = self.Î³

        return c ** (-1 / Î³)

    def f(self, k):
        'Production function'
        Î±, A = self.Î±, self.A

        return A * k ** Î±

    def f_prime(self, k):
        'Derivative of production function'
        Î±, A = self.Î±, self.A

        return Î± * A * k ** (Î± - 1)

    def f_prime_inv(self, k):
        'Inverse of derivative of production function'
        Î±, A = self.Î±, self.A

        return (k / (A * Î±)) ** (1 / (Î± - 1))

    def next_k_c(self, k, c):
        ''''
        Given the current capital Kt and an arbitrary feasible
        consumption choice Ct, computes Kt+1 by state transition law
        and optimal Ct+1 by Euler equation.
        '''
        Î², Î´ = self.Î², self.Î´
        u_prime, u_prime_inv = self.u_prime, self.u_prime_inv
        f, f_prime = self.f, self.f_prime

        k_next = f(k) + (1 - Î´) * k - c
        c_next = u_prime_inv(u_prime(c) / (Î² * (f_prime(k_next) + (1 - Î´))))

        return k_next, c_next
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[5], line 1[0m
[0;32m----> 1[0m [38;5;129m@jitclass[39m(planning_data)
[1;32m      2[0m [38;5;28;01mclass[39;00m [38;5;21;01mPlanningProblem[39;00m():
[1;32m      4[0m     [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, Î³[38;5;241m=[39m[38;5;241m2[39m, Î²[38;5;241m=[39m[38;5;241m0.95[39m, Î´[38;5;241m=[39m[38;5;241m0.02[39m, Î±[38;5;241m=[39m[38;5;241m0.33[39m, A[38;5;241m=[39m[38;5;241m1[39m):
[1;32m      6[0m         [38;5;28mself[39m[38;5;241m.[39mÎ³, [38;5;28mself[39m[38;5;241m.[39mÎ² [38;5;241m=[39m Î³, Î²

[0;31mNameError[0m: name 'jitclass' is not defined

